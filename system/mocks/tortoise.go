// Code generated by MockGen. DO NOT EDIT.
// Source: ./tortoise.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/common/types"
)

// MockTortoise is a mock of Tortoise interface.
type MockTortoise struct {
	ctrl     *gomock.Controller
	recorder *MockTortoiseMockRecorder
}

// MockTortoiseMockRecorder is the mock recorder for MockTortoise.
type MockTortoiseMockRecorder struct {
	mock *MockTortoise
}

// NewMockTortoise creates a new mock instance.
func NewMockTortoise(ctrl *gomock.Controller) *MockTortoise {
	mock := &MockTortoise{ctrl: ctrl}
	mock.recorder = &MockTortoiseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTortoise) EXPECT() *MockTortoiseMockRecorder {
	return m.recorder
}

// BaseBlock mocks base method.
func (m *MockTortoise) BaseBlock(arg0 context.Context) (types.BlockID, [][]types.BlockID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseBlock", arg0)
	ret0, _ := ret[0].(types.BlockID)
	ret1, _ := ret[1].([][]types.BlockID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BaseBlock indicates an expected call of BaseBlock.
func (mr *MockTortoiseMockRecorder) BaseBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseBlock", reflect.TypeOf((*MockTortoise)(nil).BaseBlock), arg0)
}

// HandleIncomingLayer mocks base method.
func (m *MockTortoise) HandleIncomingLayer(arg0 context.Context, arg1 types.LayerID) (types.LayerID, types.LayerID, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleIncomingLayer", arg0, arg1)
	ret0, _ := ret[0].(types.LayerID)
	ret1, _ := ret[1].(types.LayerID)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// HandleIncomingLayer indicates an expected call of HandleIncomingLayer.
func (mr *MockTortoiseMockRecorder) HandleIncomingLayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleIncomingLayer", reflect.TypeOf((*MockTortoise)(nil).HandleIncomingLayer), arg0, arg1)
}

// Persist mocks base method.
func (m *MockTortoise) Persist(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Persist indicates an expected call of Persist.
func (mr *MockTortoiseMockRecorder) Persist(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockTortoise)(nil).Persist), ctx)
}

// Stop mocks base method.
func (m *MockTortoise) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTortoiseMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTortoise)(nil).Stop))
}
