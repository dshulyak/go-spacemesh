// Code generated by github.com/spacemeshos/go-scale/scalegen. DO NOT EDIT.

package multisig

import (
	"github.com/spacemeshos/go-scale"
)

func (t *SpawnArguments) EncodeScale(enc *scale.Encoder) (total int, err error) {
	if n, err := scale.EncodeStructSlice(enc, t.PublicKeys); err != nil {
		return total, err
	} else {
		total += n
	}
	return total, nil
}

func (t *SpawnArguments) DecodeScale(dec *scale.Decoder) (total int, err error) {
	if field, n, err := scale.DecodeStructSlice[Hash32](dec); err != nil {
		return total, err
	} else {
		total += n
		t.PublicKeys = field
	}
	return total, nil
}

func (t *SpendArguments) EncodeScale(enc *scale.Encoder) (total int, err error) {
	if n, err := scale.EncodeByteArray(enc, t.Destination[:]); err != nil {
		return total, err
	} else {
		total += n
	}
	if n, err := scale.EncodeCompact64(enc, t.Amount); err != nil {
		return total, err
	} else {
		total += n
	}
	return total, nil
}

func (t *SpendArguments) DecodeScale(dec *scale.Decoder) (total int, err error) {
	if n, err := scale.DecodeByteArray(dec, t.Destination[:]); err != nil {
		return total, err
	} else {
		total += n
	}
	if field, n, err := scale.DecodeCompact64(dec); err != nil {
		return total, err
	} else {
		total += n
		t.Amount = field
	}
	return total, nil
}

func (t *SpendPayload) EncodeScale(enc *scale.Encoder) (total int, err error) {
	if n, err := t.Arguments.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}
	if n, err := t.Nonce.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}
	if n, err := scale.EncodeCompact64(enc, t.GasPrice); err != nil {
		return total, err
	} else {
		total += n
	}
	return total, nil
}

func (t *SpendPayload) DecodeScale(dec *scale.Decoder) (total int, err error) {
	if n, err := t.Arguments.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}
	if n, err := t.Nonce.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}
	if field, n, err := scale.DecodeCompact64(dec); err != nil {
		return total, err
	} else {
		total += n
		t.GasPrice = field
	}
	return total, nil
}

func (t *SpawnPayload) EncodeScale(enc *scale.Encoder) (total int, err error) {
	if n, err := t.Arguments.EncodeScale(enc); err != nil {
		return total, err
	} else {
		total += n
	}
	if n, err := scale.EncodeCompact64(enc, t.GasPrice); err != nil {
		return total, err
	} else {
		total += n
	}
	return total, nil
}

func (t *SpawnPayload) DecodeScale(dec *scale.Decoder) (total int, err error) {
	if n, err := t.Arguments.DecodeScale(dec); err != nil {
		return total, err
	} else {
		total += n
	}
	if field, n, err := scale.DecodeCompact64(dec); err != nil {
		return total, err
	} else {
		total += n
		t.GasPrice = field
	}
	return total, nil
}

func (t *Signature) EncodeScale(enc *scale.Encoder) (total int, err error) {
	if n, err := scale.EncodeCompact8(enc, t.PublicKeyRef); err != nil {
		return total, err
	} else {
		total += n
	}
	if n, err := scale.EncodeByteArray(enc, t.Signature[:]); err != nil {
		return total, err
	} else {
		total += n
	}
	return total, nil
}

func (t *Signature) DecodeScale(dec *scale.Decoder) (total int, err error) {
	if field, n, err := scale.DecodeCompact8(dec); err != nil {
		return total, err
	} else {
		total += n
		t.PublicKeyRef = field
	}
	if n, err := scale.DecodeByteArray(dec, t.Signature[:]); err != nil {
		return total, err
	} else {
		total += n
	}
	return total, nil
}
