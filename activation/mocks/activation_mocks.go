// Code generated by MockGen. DO NOT EDIT.
// Source: ./activation.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	activation "github.com/spacemeshos/go-spacemesh/activation"
	types "github.com/spacemeshos/go-spacemesh/common/types"
	signing "github.com/spacemeshos/go-spacemesh/signing"
)

// MockmeshProvider is a mock of meshProvider interface.
type MockmeshProvider struct {
	ctrl     *gomock.Controller
	recorder *MockmeshProviderMockRecorder
}

// MockmeshProviderMockRecorder is the mock recorder for MockmeshProvider.
type MockmeshProviderMockRecorder struct {
	mock *MockmeshProvider
}

// NewMockmeshProvider creates a new mock instance.
func NewMockmeshProvider(ctrl *gomock.Controller) *MockmeshProvider {
	mock := &MockmeshProvider{ctrl: ctrl}
	mock.recorder = &MockmeshProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmeshProvider) EXPECT() *MockmeshProviderMockRecorder {
	return m.recorder
}

// GetOrphanBlocksBefore mocks base method.
func (m *MockmeshProvider) GetOrphanBlocksBefore(l types.LayerID) ([]types.BlockID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrphanBlocksBefore", l)
	ret0, _ := ret[0].([]types.BlockID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrphanBlocksBefore indicates an expected call of GetOrphanBlocksBefore.
func (mr *MockmeshProviderMockRecorder) GetOrphanBlocksBefore(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrphanBlocksBefore", reflect.TypeOf((*MockmeshProvider)(nil).GetOrphanBlocksBefore), l)
}

// LatestLayer mocks base method.
func (m *MockmeshProvider) LatestLayer() types.LayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestLayer")
	ret0, _ := ret[0].(types.LayerID)
	return ret0
}

// LatestLayer indicates an expected call of LatestLayer.
func (mr *MockmeshProviderMockRecorder) LatestLayer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestLayer", reflect.TypeOf((*MockmeshProvider)(nil).LatestLayer))
}

// Mockbroadcaster is a mock of broadcaster interface.
type Mockbroadcaster struct {
	ctrl     *gomock.Controller
	recorder *MockbroadcasterMockRecorder
}

// MockbroadcasterMockRecorder is the mock recorder for Mockbroadcaster.
type MockbroadcasterMockRecorder struct {
	mock *Mockbroadcaster
}

// NewMockbroadcaster creates a new mock instance.
func NewMockbroadcaster(ctrl *gomock.Controller) *Mockbroadcaster {
	mock := &Mockbroadcaster{ctrl: ctrl}
	mock.recorder = &MockbroadcasterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockbroadcaster) EXPECT() *MockbroadcasterMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *Mockbroadcaster) Broadcast(ctx context.Context, channel string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", ctx, channel, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockbroadcasterMockRecorder) Broadcast(ctx, channel, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*Mockbroadcaster)(nil).Broadcast), ctx, channel, data)
}

// MocknipostBuilder is a mock of nipostBuilder interface.
type MocknipostBuilder struct {
	ctrl     *gomock.Controller
	recorder *MocknipostBuilderMockRecorder
}

// MocknipostBuilderMockRecorder is the mock recorder for MocknipostBuilder.
type MocknipostBuilderMockRecorder struct {
	mock *MocknipostBuilder
}

// NewMocknipostBuilder creates a new mock instance.
func NewMocknipostBuilder(ctrl *gomock.Controller) *MocknipostBuilder {
	mock := &MocknipostBuilder{ctrl: ctrl}
	mock.recorder = &MocknipostBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknipostBuilder) EXPECT() *MocknipostBuilderMockRecorder {
	return m.recorder
}

// BuildNIPost mocks base method.
func (m *MocknipostBuilder) BuildNIPost(ctx context.Context, challenge *types.Hash32, timeout chan struct{}) (*types.NIPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildNIPost", ctx, challenge, timeout)
	ret0, _ := ret[0].(*types.NIPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildNIPost indicates an expected call of BuildNIPost.
func (mr *MocknipostBuilderMockRecorder) BuildNIPost(ctx, challenge, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildNIPost", reflect.TypeOf((*MocknipostBuilder)(nil).BuildNIPost), ctx, challenge, timeout)
}

// updatePoETProver mocks base method.
func (m *MocknipostBuilder) updatePoETProver(arg0 activation.PoetProvingServiceClient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "updatePoETProver", arg0)
}

// updatePoETProver indicates an expected call of updatePoETProver.
func (mr *MocknipostBuilderMockRecorder) updatePoETProver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updatePoETProver", reflect.TypeOf((*MocknipostBuilder)(nil).updatePoETProver), arg0)
}

// MockidStore is a mock of idStore interface.
type MockidStore struct {
	ctrl     *gomock.Controller
	recorder *MockidStoreMockRecorder
}

// MockidStoreMockRecorder is the mock recorder for MockidStore.
type MockidStoreMockRecorder struct {
	mock *MockidStore
}

// NewMockidStore creates a new mock instance.
func NewMockidStore(ctrl *gomock.Controller) *MockidStore {
	mock := &MockidStore{ctrl: ctrl}
	mock.recorder = &MockidStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockidStore) EXPECT() *MockidStoreMockRecorder {
	return m.recorder
}

// GetIdentity mocks base method.
func (m *MockidStore) GetIdentity(id string) (types.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentity", id)
	ret0, _ := ret[0].(types.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentity indicates an expected call of GetIdentity.
func (mr *MockidStoreMockRecorder) GetIdentity(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentity", reflect.TypeOf((*MockidStore)(nil).GetIdentity), id)
}

// StoreNodeIdentity mocks base method.
func (m *MockidStore) StoreNodeIdentity(id types.NodeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreNodeIdentity", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreNodeIdentity indicates an expected call of StoreNodeIdentity.
func (mr *MockidStoreMockRecorder) StoreNodeIdentity(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreNodeIdentity", reflect.TypeOf((*MockidStore)(nil).StoreNodeIdentity), id)
}

// MocknipostValidator is a mock of nipostValidator interface.
type MocknipostValidator struct {
	ctrl     *gomock.Controller
	recorder *MocknipostValidatorMockRecorder
}

// MocknipostValidatorMockRecorder is the mock recorder for MocknipostValidator.
type MocknipostValidatorMockRecorder struct {
	mock *MocknipostValidator
}

// NewMocknipostValidator creates a new mock instance.
func NewMocknipostValidator(ctrl *gomock.Controller) *MocknipostValidator {
	mock := &MocknipostValidator{ctrl: ctrl}
	mock.recorder = &MocknipostValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknipostValidator) EXPECT() *MocknipostValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MocknipostValidator) Validate(id signing.PublicKey, NIPost *types.NIPost, expectedChallenge types.Hash32, numUnits uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", id, NIPost, expectedChallenge, numUnits)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MocknipostValidatorMockRecorder) Validate(id, NIPost, expectedChallenge, numUnits interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MocknipostValidator)(nil).Validate), id, NIPost, expectedChallenge, numUnits)
}

// ValidatePost mocks base method.
func (m *MocknipostValidator) ValidatePost(id []byte, Post *types.Post, PostMetadata *types.PostMetadata, numUnits uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePost", id, Post, PostMetadata, numUnits)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidatePost indicates an expected call of ValidatePost.
func (mr *MocknipostValidatorMockRecorder) ValidatePost(id, Post, PostMetadata, numUnits interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePost", reflect.TypeOf((*MocknipostValidator)(nil).ValidatePost), id, Post, PostMetadata, numUnits)
}

// MockatxDBProvider is a mock of atxDBProvider interface.
type MockatxDBProvider struct {
	ctrl     *gomock.Controller
	recorder *MockatxDBProviderMockRecorder
}

// MockatxDBProviderMockRecorder is the mock recorder for MockatxDBProvider.
type MockatxDBProviderMockRecorder struct {
	mock *MockatxDBProvider
}

// NewMockatxDBProvider creates a new mock instance.
func NewMockatxDBProvider(ctrl *gomock.Controller) *MockatxDBProvider {
	mock := &MockatxDBProvider{ctrl: ctrl}
	mock.recorder = &MockatxDBProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockatxDBProvider) EXPECT() *MockatxDBProviderMockRecorder {
	return m.recorder
}

// AwaitAtx mocks base method.
func (m *MockatxDBProvider) AwaitAtx(id types.ATXID) chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AwaitAtx", id)
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// AwaitAtx indicates an expected call of AwaitAtx.
func (mr *MockatxDBProviderMockRecorder) AwaitAtx(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AwaitAtx", reflect.TypeOf((*MockatxDBProvider)(nil).AwaitAtx), id)
}

// GetAtxHeader mocks base method.
func (m *MockatxDBProvider) GetAtxHeader(id types.ATXID) (*types.ActivationTxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAtxHeader", id)
	ret0, _ := ret[0].(*types.ActivationTxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAtxHeader indicates an expected call of GetAtxHeader.
func (mr *MockatxDBProviderMockRecorder) GetAtxHeader(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAtxHeader", reflect.TypeOf((*MockatxDBProvider)(nil).GetAtxHeader), id)
}

// GetAtxTimestamp mocks base method.
func (m *MockatxDBProvider) GetAtxTimestamp(id types.ATXID) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAtxTimestamp", id)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAtxTimestamp indicates an expected call of GetAtxTimestamp.
func (mr *MockatxDBProviderMockRecorder) GetAtxTimestamp(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAtxTimestamp", reflect.TypeOf((*MockatxDBProvider)(nil).GetAtxTimestamp), id)
}

// GetNodeLastAtxID mocks base method.
func (m *MockatxDBProvider) GetNodeLastAtxID(nodeID types.NodeID) (types.ATXID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeLastAtxID", nodeID)
	ret0, _ := ret[0].(types.ATXID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeLastAtxID indicates an expected call of GetNodeLastAtxID.
func (mr *MockatxDBProviderMockRecorder) GetNodeLastAtxID(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeLastAtxID", reflect.TypeOf((*MockatxDBProvider)(nil).GetNodeLastAtxID), nodeID)
}

// GetPosAtxID mocks base method.
func (m *MockatxDBProvider) GetPosAtxID() (types.ATXID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosAtxID")
	ret0, _ := ret[0].(types.ATXID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosAtxID indicates an expected call of GetPosAtxID.
func (mr *MockatxDBProviderMockRecorder) GetPosAtxID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosAtxID", reflect.TypeOf((*MockatxDBProvider)(nil).GetPosAtxID))
}

// UnsubscribeAtx mocks base method.
func (m *MockatxDBProvider) UnsubscribeAtx(id types.ATXID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsubscribeAtx", id)
}

// UnsubscribeAtx indicates an expected call of UnsubscribeAtx.
func (mr *MockatxDBProviderMockRecorder) UnsubscribeAtx(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeAtx", reflect.TypeOf((*MockatxDBProvider)(nil).UnsubscribeAtx), id)
}

// MockbytesStore is a mock of bytesStore interface.
type MockbytesStore struct {
	ctrl     *gomock.Controller
	recorder *MockbytesStoreMockRecorder
}

// MockbytesStoreMockRecorder is the mock recorder for MockbytesStore.
type MockbytesStoreMockRecorder struct {
	mock *MockbytesStore
}

// NewMockbytesStore creates a new mock instance.
func NewMockbytesStore(ctrl *gomock.Controller) *MockbytesStore {
	mock := &MockbytesStore{ctrl: ctrl}
	mock.recorder = &MockbytesStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbytesStore) EXPECT() *MockbytesStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockbytesStore) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockbytesStoreMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockbytesStore)(nil).Get), key)
}

// Put mocks base method.
func (m *MockbytesStore) Put(key, buf []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, buf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockbytesStoreMockRecorder) Put(key, buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockbytesStore)(nil).Put), key, buf)
}

// Mocksigner is a mock of signer interface.
type Mocksigner struct {
	ctrl     *gomock.Controller
	recorder *MocksignerMockRecorder
}

// MocksignerMockRecorder is the mock recorder for Mocksigner.
type MocksignerMockRecorder struct {
	mock *Mocksigner
}

// NewMocksigner creates a new mock instance.
func NewMocksigner(ctrl *gomock.Controller) *Mocksigner {
	mock := &Mocksigner{ctrl: ctrl}
	mock.recorder = &MocksignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksigner) EXPECT() *MocksignerMockRecorder {
	return m.recorder
}

// Sign mocks base method.
func (m_2 *Mocksigner) Sign(m []byte) []byte {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Sign", m)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Sign indicates an expected call of Sign.
func (mr *MocksignerMockRecorder) Sign(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*Mocksigner)(nil).Sign), m)
}

// MocklayerClock is a mock of layerClock interface.
type MocklayerClock struct {
	ctrl     *gomock.Controller
	recorder *MocklayerClockMockRecorder
}

// MocklayerClockMockRecorder is the mock recorder for MocklayerClock.
type MocklayerClockMockRecorder struct {
	mock *MocklayerClock
}

// NewMocklayerClock creates a new mock instance.
func NewMocklayerClock(ctrl *gomock.Controller) *MocklayerClock {
	mock := &MocklayerClock{ctrl: ctrl}
	mock.recorder = &MocklayerClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklayerClock) EXPECT() *MocklayerClockMockRecorder {
	return m.recorder
}

// AwaitLayer mocks base method.
func (m *MocklayerClock) AwaitLayer(layerID types.LayerID) chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AwaitLayer", layerID)
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// AwaitLayer indicates an expected call of AwaitLayer.
func (mr *MocklayerClockMockRecorder) AwaitLayer(layerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AwaitLayer", reflect.TypeOf((*MocklayerClock)(nil).AwaitLayer), layerID)
}

// GetCurrentLayer mocks base method.
func (m *MocklayerClock) GetCurrentLayer() types.LayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentLayer")
	ret0, _ := ret[0].(types.LayerID)
	return ret0
}

// GetCurrentLayer indicates an expected call of GetCurrentLayer.
func (mr *MocklayerClockMockRecorder) GetCurrentLayer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentLayer", reflect.TypeOf((*MocklayerClock)(nil).GetCurrentLayer))
}

// Mocksyncer is a mock of syncer interface.
type Mocksyncer struct {
	ctrl     *gomock.Controller
	recorder *MocksyncerMockRecorder
}

// MocksyncerMockRecorder is the mock recorder for Mocksyncer.
type MocksyncerMockRecorder struct {
	mock *Mocksyncer
}

// NewMocksyncer creates a new mock instance.
func NewMocksyncer(ctrl *gomock.Controller) *Mocksyncer {
	mock := &Mocksyncer{ctrl: ctrl}
	mock.recorder = &MocksyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksyncer) EXPECT() *MocksyncerMockRecorder {
	return m.recorder
}

// RegisterChForSynced mocks base method.
func (m *Mocksyncer) RegisterChForSynced(arg0 context.Context, arg1 chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterChForSynced", arg0, arg1)
}

// RegisterChForSynced indicates an expected call of RegisterChForSynced.
func (mr *MocksyncerMockRecorder) RegisterChForSynced(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterChForSynced", reflect.TypeOf((*Mocksyncer)(nil).RegisterChForSynced), arg0, arg1)
}

// MockSmeshingProvider is a mock of SmeshingProvider interface.
type MockSmeshingProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSmeshingProviderMockRecorder
}

// MockSmeshingProviderMockRecorder is the mock recorder for MockSmeshingProvider.
type MockSmeshingProviderMockRecorder struct {
	mock *MockSmeshingProvider
}

// NewMockSmeshingProvider creates a new mock instance.
func NewMockSmeshingProvider(ctrl *gomock.Controller) *MockSmeshingProvider {
	mock := &MockSmeshingProvider{ctrl: ctrl}
	mock.recorder = &MockSmeshingProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmeshingProvider) EXPECT() *MockSmeshingProviderMockRecorder {
	return m.recorder
}

// Coinbase mocks base method.
func (m *MockSmeshingProvider) Coinbase() types.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Coinbase")
	ret0, _ := ret[0].(types.Address)
	return ret0
}

// Coinbase indicates an expected call of Coinbase.
func (mr *MockSmeshingProviderMockRecorder) Coinbase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Coinbase", reflect.TypeOf((*MockSmeshingProvider)(nil).Coinbase))
}

// MinGas mocks base method.
func (m *MockSmeshingProvider) MinGas() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinGas")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// MinGas indicates an expected call of MinGas.
func (mr *MockSmeshingProviderMockRecorder) MinGas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinGas", reflect.TypeOf((*MockSmeshingProvider)(nil).MinGas))
}

// SetCoinbase mocks base method.
func (m *MockSmeshingProvider) SetCoinbase(coinbase types.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCoinbase", coinbase)
}

// SetCoinbase indicates an expected call of SetCoinbase.
func (mr *MockSmeshingProviderMockRecorder) SetCoinbase(coinbase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCoinbase", reflect.TypeOf((*MockSmeshingProvider)(nil).SetCoinbase), coinbase)
}

// SetMinGas mocks base method.
func (m *MockSmeshingProvider) SetMinGas(value uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMinGas", value)
}

// SetMinGas indicates an expected call of SetMinGas.
func (mr *MockSmeshingProviderMockRecorder) SetMinGas(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMinGas", reflect.TypeOf((*MockSmeshingProvider)(nil).SetMinGas), value)
}

// SmesherID mocks base method.
func (m *MockSmeshingProvider) SmesherID() types.NodeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SmesherID")
	ret0, _ := ret[0].(types.NodeID)
	return ret0
}

// SmesherID indicates an expected call of SmesherID.
func (mr *MockSmeshingProviderMockRecorder) SmesherID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SmesherID", reflect.TypeOf((*MockSmeshingProvider)(nil).SmesherID))
}

// Smeshing mocks base method.
func (m *MockSmeshingProvider) Smeshing() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Smeshing")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Smeshing indicates an expected call of Smeshing.
func (mr *MockSmeshingProviderMockRecorder) Smeshing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Smeshing", reflect.TypeOf((*MockSmeshingProvider)(nil).Smeshing))
}

// StartSmeshing mocks base method.
func (m *MockSmeshingProvider) StartSmeshing(ctx context.Context, coinbase types.Address, opts activation.PostSetupOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSmeshing", ctx, coinbase, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSmeshing indicates an expected call of StartSmeshing.
func (mr *MockSmeshingProviderMockRecorder) StartSmeshing(ctx, coinbase, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSmeshing", reflect.TypeOf((*MockSmeshingProvider)(nil).StartSmeshing), ctx, coinbase, opts)
}

// StopSmeshing mocks base method.
func (m *MockSmeshingProvider) StopSmeshing(deleteFiles bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSmeshing", deleteFiles)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopSmeshing indicates an expected call of StopSmeshing.
func (mr *MockSmeshingProviderMockRecorder) StopSmeshing(deleteFiles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSmeshing", reflect.TypeOf((*MockSmeshingProvider)(nil).StopSmeshing), deleteFiles)
}
