// Code generated by MockGen. DO NOT EDIT.
// Source: ./sync.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	p2pcrypto "github.com/spacemeshos/go-spacemesh/p2p/p2pcrypto"
	server "github.com/spacemeshos/go-spacemesh/p2p/server"
)

// MockTime is a mock of Time interface.
type MockTime struct {
	ctrl     *gomock.Controller
	recorder *MockTimeMockRecorder
}

// MockTimeMockRecorder is the mock recorder for MockTime.
type MockTimeMockRecorder struct {
	mock *MockTime
}

// NewMockTime creates a new mock instance.
func NewMockTime(ctrl *gomock.Controller) *MockTime {
	mock := &MockTime{ctrl: ctrl}
	mock.recorder = &MockTimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTime) EXPECT() *MockTimeMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockTime) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockTimeMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockTime)(nil).Now))
}

// MockMessageServer is a mock of MessageServer interface.
type MockMessageServer struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServerMockRecorder
}

// MockMessageServerMockRecorder is the mock recorder for MockMessageServer.
type MockMessageServerMockRecorder struct {
	mock *MockMessageServer
}

// NewMockMessageServer creates a new mock instance.
func NewMockMessageServer(ctrl *gomock.Controller) *MockMessageServer {
	mock := &MockMessageServer{ctrl: ctrl}
	mock.recorder = &MockMessageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageServer) EXPECT() *MockMessageServerMockRecorder {
	return m.recorder
}

// RegisterBytesMsgHandler mocks base method.
func (m *MockMessageServer) RegisterBytesMsgHandler(arg0 server.MessageType, arg1 func(context.Context, []byte) []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterBytesMsgHandler", arg0, arg1)
}

// RegisterBytesMsgHandler indicates an expected call of RegisterBytesMsgHandler.
func (mr *MockMessageServerMockRecorder) RegisterBytesMsgHandler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBytesMsgHandler", reflect.TypeOf((*MockMessageServer)(nil).RegisterBytesMsgHandler), arg0, arg1)
}

// SendRequest mocks base method.
func (m *MockMessageServer) SendRequest(arg0 context.Context, arg1 server.MessageType, arg2 []byte, arg3 p2pcrypto.PublicKey, arg4 func([]byte), arg5 func(error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockMessageServerMockRecorder) SendRequest(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockMessageServer)(nil).SendRequest), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MockPeersProvider is a mock of PeersProvider interface.
type MockPeersProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPeersProviderMockRecorder
}

// MockPeersProviderMockRecorder is the mock recorder for MockPeersProvider.
type MockPeersProviderMockRecorder struct {
	mock *MockPeersProvider
}

// NewMockPeersProvider creates a new mock instance.
func NewMockPeersProvider(ctrl *gomock.Controller) *MockPeersProvider {
	mock := &MockPeersProvider{ctrl: ctrl}
	mock.recorder = &MockPeersProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeersProvider) EXPECT() *MockPeersProviderMockRecorder {
	return m.recorder
}

// SubscribePeerEvents mocks base method.
func (m *MockPeersProvider) SubscribePeerEvents() (chan p2pcrypto.PublicKey, chan p2pcrypto.PublicKey) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribePeerEvents")
	ret0, _ := ret[0].(chan p2pcrypto.PublicKey)
	ret1, _ := ret[1].(chan p2pcrypto.PublicKey)
	return ret0, ret1
}

// SubscribePeerEvents indicates an expected call of SubscribePeerEvents.
func (mr *MockPeersProviderMockRecorder) SubscribePeerEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribePeerEvents", reflect.TypeOf((*MockPeersProvider)(nil).SubscribePeerEvents))
}
