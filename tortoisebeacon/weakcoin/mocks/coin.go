// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/spacemeshos/go-spacemesh/p2p/service"
	mock "github.com/stretchr/testify/mock"

	types "github.com/spacemeshos/go-spacemesh/common/types"

	weakcoin "github.com/spacemeshos/go-spacemesh/tortoisebeacon/weakcoin"
)

// Coin is an autogenerated mock type for the Coin type
type Coin struct {
	mock.Mock
}

// CompleteEpoch provides a mock function with given fields:
func (_m *Coin) CompleteEpoch() {
	_m.Called()
}

// CompleteRound provides a mock function with given fields:
func (_m *Coin) CompleteRound() {
	_m.Called()
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *Coin) Get(_a0 types.EpochID, _a1 types.RoundID) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.EpochID, types.RoundID) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HandleSerializedMessage provides a mock function with given fields: _a0, _a1, _a2
func (_m *Coin) HandleSerializedMessage(_a0 context.Context, _a1 service.GossipMessage, _a2 service.Fetcher) {
	_m.Called(_a0, _a1, _a2)
}

// StartEpoch provides a mock function with given fields: _a0, _a1
func (_m *Coin) StartEpoch(_a0 types.EpochID, _a1 weakcoin.UnitAllowances) {
	_m.Called(_a0, _a1)
}

// StartRound provides a mock function with given fields: _a0, _a1, _a2
func (_m *Coin) StartRound(_a0 context.Context, _a1 types.EpochID, _a2 types.RoundID) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.EpochID, types.RoundID) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
