// Code generated by github.com/spacemeshos/go-scale/scalegen. DO NOT EDIT.

// nolint
package result

import (
	"github.com/spacemeshos/go-scale"
	"github.com/spacemeshos/go-spacemesh/common/types"
)

func (t *Layer) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeCompact32(enc, uint32(t.Layer))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeBool(enc, t.Verified)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.Opinion[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStructSliceWithLimit(enc, t.Blocks, 100000)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Layer) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeCompact32(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Layer = types.LayerID(field)
	}
	{
		field, n, err := scale.DecodeBool(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Verified = field
	}
	{
		n, err := scale.DecodeByteArray(dec, t.Opinion[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeStructSliceWithLimit[Block](dec, 100000)
		if err != nil {
			return total, err
		}
		total += n
		t.Blocks = field
	}
	return total, nil
}

func (t *Block) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := t.Header.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeBool(enc, t.Valid)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeBool(enc, t.Invalid)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeBool(enc, t.Hare)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeBool(enc, t.Data)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Block) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := t.Header.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeBool(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Valid = field
	}
	{
		field, n, err := scale.DecodeBool(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Invalid = field
	}
	{
		field, n, err := scale.DecodeBool(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Hare = field
	}
	{
		field, n, err := scale.DecodeBool(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Data = field
	}
	return total, nil
}
